{"version":3,"file":"app~fc2771c0.bundle.js","mappings":"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","sources":["webpack://kalkulori/./src/scripts/utils/meal-api-service.js"],"sourcesContent":["class MealApiService {\r\n  constructor() {\r\n    this.baseUrl = 'https://kalkulori.up.railway.app/api';\r\n  }\r\n\r\n  async createMealEntry(mealData) {\r\n    try {\r\n      const token = localStorage.getItem('authToken');\r\n      const response = await fetch(`${this.baseUrl}/meals`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify(mealData)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n      if (result.status === 'success') {\r\n        return result.data;\r\n      } else {\r\n        throw new Error(result.message || 'Failed to create meal entry');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating meal entry:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getMealEntries(params = {}) {\r\n    try {\r\n      const token = localStorage.getItem('authToken');\r\n      const queryParams = new URLSearchParams();\r\n      \r\n      if (params.log_date) queryParams.append('log_date', params.log_date);\r\n      if (params.meal_type) queryParams.append('meal_type', params.meal_type);\r\n\r\n      const url = `${this.baseUrl}/meals/updated${queryParams.toString() ? '?' + queryParams.toString() : ''}`;\r\n      \r\n      const response = await fetch(url, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n      if (result.status === 'success') {\r\n        return result.data.meal_entries;\r\n      } else {\r\n        throw new Error(result.message || 'Failed to fetch meal entries');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching meal entries:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getDailyLog(logDate) {\r\n    try {\r\n      const token = localStorage.getItem('authToken');\r\n      \r\n      const response = await fetch(`${this.baseUrl}/logs/${logDate}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      if (response.status === 404) {\r\n        console.log('No data for date:', logDate, '- returning empty');\r\n        return {\r\n          daily_log: {\r\n            total_calories_consumed: 0,\r\n            total_protein_consumed: 0,\r\n            total_carbs_consumed: 0,\r\n            total_fat_consumed: 0,\r\n            remaining_calories: 1500\r\n          },\r\n          meal_entries: []\r\n        };\r\n      }\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n      if (result.status === 'success') {\r\n        return result.data;\r\n      } else {\r\n        throw new Error(result.message || 'Failed to fetch daily log');\r\n      }\r\n    } catch (error) {\r\n      if (error.message.includes('404')) {\r\n        return {\r\n          daily_log: {\r\n            total_calories_consumed: 0,\r\n            total_protein_consumed: 0,\r\n            total_carbs_consumed: 0,\r\n            total_fat_consumed: 0,\r\n            remaining_calories: 1500\r\n          },\r\n          meal_entries: []\r\n        };\r\n      }\r\n      console.error('Error fetching daily log:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async updateMealEntry(mealEntryId, updateData) {\r\n    try {\r\n      const token = localStorage.getItem('authToken');\r\n      const response = await fetch(`${this.baseUrl}/meals/${mealEntryId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify(updateData)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n      if (result.status === 'success') {\r\n        return result;\r\n      } else {\r\n        throw new Error(result.message || 'Failed to update meal entry');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating meal entry:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async deleteMealEntry(mealEntryId) {\r\n    try {\r\n      const token = localStorage.getItem('authToken');\r\n      const response = await fetch(`${this.baseUrl}/meals/${mealEntryId}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n      if (result.status === 'success') {\r\n        return result;\r\n      } else {\r\n        throw new Error(result.message || 'Failed to delete meal entry');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting meal entry:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async generateMealPlan() {\r\n    try {\r\n      const token = localStorage.getItem('authToken');\r\n      console.log('🚀 Calling meal plan API...');\r\n      \r\n      if (!token) {\r\n        throw new Error('Authentication token not found. Please login again.');\r\n      }\r\n      \r\n      const response = await fetch(`${this.baseUrl}/meal-plans/generate`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      let result;\r\n      try {\r\n        result = await response.json();\r\n      } catch (parseError) {\r\n        console.error('🚨 Failed to parse response as JSON:', parseError);\r\n        throw new Error('Invalid response from server. Please try again.');\r\n      }\r\n\r\n      console.log('🔍 Meal Plan API Response:', { \r\n        status: response.status, \r\n        ok: response.ok,\r\n        data: result \r\n      });\r\n\r\n      if (!response.ok) {\r\n        let errorMessage = result.message || 'Failed to generate meal plan';\r\n        \r\n        if (response.status === 401) {\r\n          errorMessage = 'Authentication failed. Please login again.';\r\n        } else if (response.status === 404) {\r\n          errorMessage = 'Profile not found. Please complete your profile first.';\r\n        } else if (response.status === 400) {\r\n          if (result.message && result.message.includes('calorie target')) {\r\n            errorMessage = 'Daily calorie target not set. Please update your profile.';\r\n          } else {\r\n            errorMessage = result.message || 'Bad request. Please check your profile settings.';\r\n          }\r\n        } else if (response.status === 500) {\r\n          errorMessage = 'Server error. Please check your profile settings or try again later.';\r\n        } else if (response.status === 503) {\r\n          errorMessage = 'Meal plan service temporarily unavailable. Please try again later.';\r\n        } else if (response.status === 504) {\r\n          errorMessage = 'Request timeout. The service is taking too long to respond.';\r\n        }\r\n        \r\n        console.error('🚨 Meal Plan API Error:', { \r\n          status: response.status, \r\n          message: errorMessage, \r\n          details: result,\r\n          url: `${this.baseUrl}/meal-plans/generate`\r\n        });\r\n        throw new Error(errorMessage);\r\n      }\r\n      \r\n      if (result.status === 'success') {\r\n        console.log('✅ Meal Plan API Success - validating data structure...');\r\n        \r\n        if (!result.data) {\r\n          console.error('❌ Missing data in successful response:', result);\r\n          throw new Error('Invalid response: missing data');\r\n        }\r\n        \r\n        if (!result.data.meal_plans) {\r\n          console.error('❌ Missing meal_plans in response data:', result.data);\r\n          throw new Error('Invalid response: missing meal_plans');\r\n        }\r\n        \r\n        if (!Array.isArray(result.data.meal_plans)) {\r\n          console.error('❌ meal_plans is not an array:', typeof result.data.meal_plans, result.data.meal_plans);\r\n          throw new Error('Invalid response: meal_plans should be an array');\r\n        }\r\n        \r\n        if (result.data.meal_plans.length === 0) {\r\n          console.error('❌ Empty meal_plans array:', result.data.meal_plans);\r\n          throw new Error('No meal plans generated. Please try again.');\r\n        }\r\n        \r\n        const firstPlan = result.data.meal_plans[0];\r\n        if (!firstPlan || typeof firstPlan !== 'object') {\r\n          console.error('❌ Invalid first meal plan:', firstPlan);\r\n          throw new Error('Invalid meal plan data structure');\r\n        }\r\n        \r\n        const possibleMealTypes = [\r\n          'breakfast', 'lunch', 'dinner',\r\n          'Breakfast', 'Lunch', 'Dinner',\r\n          'BREAKFAST', 'LUNCH', 'DINNER'\r\n        ];\r\n        \r\n        console.log('🔍 Checking for meals in plan. Available keys:', Object.keys(firstPlan));\r\n        \r\n        const foundMeals = [];\r\n        possibleMealTypes.forEach(type => {\r\n          if (firstPlan[type]) {\r\n            foundMeals.push(type);\r\n            console.log(`✅ Found meal type: ${type}`, firstPlan[type]);\r\n          }\r\n        });\r\n        \r\n        const allKeys = Object.keys(firstPlan);\r\n        const mealLikeKeys = allKeys.filter(key => {\r\n          const keyLower = key.toLowerCase();\r\n          return keyLower.includes('breakfast') || \r\n                 keyLower.includes('lunch') || \r\n                 keyLower.includes('dinner') ||\r\n                 keyLower.includes('meal');\r\n        });\r\n        \r\n        console.log('🔍 Meal-like keys found:', mealLikeKeys);\r\n        console.log('🔍 All plan keys:', allKeys);\r\n        \r\n        const hasMeals = foundMeals.length > 0 || mealLikeKeys.length > 0;\r\n        \r\n        if (!hasMeals) {\r\n          console.error('❌ No valid meals in plan:');\r\n          console.error('First plan structure:', JSON.stringify(firstPlan, null, 2));\r\n          console.error('Expected meal types:', possibleMealTypes);\r\n          console.error('Available keys:', allKeys);\r\n          throw new Error('Generated meal plan contains no valid meals');\r\n        }\r\n        \r\n        console.log(`✅ Found ${foundMeals.length} standard meals and ${mealLikeKeys.length} meal-like keys`);\r\n        \r\n        console.log('✅ Response validation passed:');\r\n        console.log('  - Data exists:', !!result.data);\r\n        console.log('  - meal_plans exists:', !!result.data.meal_plans);\r\n        console.log('  - meal_plans is array:', Array.isArray(result.data.meal_plans));\r\n        console.log('  - meal_plans length:', result.data.meal_plans.length);\r\n        console.log('  - First plan structure:', Object.keys(firstPlan));\r\n        console.log('  - Has meals:', hasMeals);\r\n        \r\n        return result.data;\r\n      } else {\r\n        console.error('❌ API returned non-success status:', result.status, result.message);\r\n        throw new Error(result.message || 'Failed to generate meal plan');\r\n      }\r\n    } catch (error) {\r\n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n        console.error('🌐 Network error detected:', error);\r\n        throw new Error('Network error. Please check your internet connection.');\r\n      }\r\n      \r\n      if (error.message.includes('Authentication')) {\r\n        console.error('🔐 Authentication error:', error);\r\n        throw error;\r\n      }\r\n      \r\n      console.error('💥 Generate Meal Plan Error:', {\r\n        name: error.name,\r\n        message: error.message,\r\n        stack: error.stack\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async convertMealToEntry(mealData, mealType, logDate) {\r\n    try {\r\n      let detailedMeal = mealData;\r\n      \r\n      if (mealData.recipe_id || mealData.id) {\r\n        try {\r\n          const recipeId = mealData.recipe_id || mealData.id;\r\n          detailedMeal = await this.getMealDetails(recipeId);\r\n        } catch (error) {\r\n          console.warn('Could not fetch detailed meal info, using basic data:', error);\r\n        }\r\n      }\r\n      \r\n      const entryData = {\r\n        food_item_id: detailedMeal.id || detailedMeal.recipe_id || `meal_plan_${Date.now()}`,\r\n        meal_type: mealType.toLowerCase(),\r\n        servings: detailedMeal.serving_size || 1,\r\n        log_date: logDate\r\n      };\r\n      \r\n      return await this.createMealEntry(entryData);\r\n    } catch (error) {\r\n      console.error('Error converting meal to entry:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getMealSuggestions(keywords) {\r\n    try {\r\n      const token = localStorage.getItem('authToken');\r\n      \r\n      if (!keywords || keywords.length === 0) {\r\n        throw new Error('At least 1 keyword is required');\r\n      }\r\n      \r\n      if (keywords.length > 6) {\r\n        throw new Error('Maximum 6 keywords allowed');\r\n      }\r\n      \r\n      const keywordsParam = keywords.join(',');\r\n      \r\n      const response = await fetch(`${this.baseUrl}/meals/suggestion?keywords=${encodeURIComponent(keywordsParam)}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      const result = await response.json();\r\n      console.log('🔍 Meal Suggestions API Response:', { status: response.status, data: result });\r\n\r\n      if (!response.ok) {\r\n        let errorMessage = result.message || 'Failed to get meal suggestions';\r\n        \r\n        if (response.status === 404) {\r\n          errorMessage = 'Profile not found. Please complete your profile first.';\r\n        } else if (response.status === 400) {\r\n          errorMessage = result.message || 'Invalid request parameters';\r\n        } else if (response.status === 503) {\r\n          errorMessage = 'Meal suggestion service temporarily unavailable';\r\n        } else if (response.status === 504) {\r\n          errorMessage = 'Request timeout. Please try again.';\r\n        }\r\n        \r\n        console.error('🚨 Meal Suggestions API Error:', { status: response.status, message: errorMessage });\r\n        throw new Error(errorMessage);\r\n      }\r\n      \r\n      if (result.status === 'success') {\r\n        return result.data;\r\n      } else {\r\n        throw new Error(result.message || 'Failed to get meal suggestions');\r\n      }\r\n    } catch (error) {\r\n      if (error.name === 'TypeError' || error.message.includes('fetch')) {\r\n        throw new Error('Network error. Please check your internet connection.');\r\n      }\r\n      \r\n      console.error('💥 Get Meal Suggestions Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getMealDetails(recipeId) {\r\n    try {\r\n      const token = localStorage.getItem('authToken');\r\n      \r\n      if (!recipeId) {\r\n        throw new Error('Recipe ID is required');\r\n      }\r\n      \r\n      const response = await fetch(`${this.baseUrl}/meals/${recipeId}/details`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      const result = await response.json();\r\n      console.log('🔍 Meal Details API Response:', { status: response.status, data: result });\r\n\r\n      if (!response.ok) {\r\n        let errorMessage = result.message || 'Failed to get meal details';\r\n        \r\n        if (response.status === 404) {\r\n          errorMessage = 'Recipe not found';\r\n        } else if (response.status === 503) {\r\n          errorMessage = 'Meal service temporarily unavailable';\r\n        } else if (response.status === 504) {\r\n          errorMessage = 'Request timeout. Please try again.';\r\n        }\r\n        \r\n        console.error('🚨 Meal Details API Error:', { status: response.status, message: errorMessage });\r\n        throw new Error(errorMessage);\r\n      }\r\n      \r\n      if (result.status === 'success') {\r\n        return result.data;\r\n      } else {\r\n        throw new Error(result.message || 'Failed to get meal details');\r\n      }\r\n    } catch (error) {\r\n      if (error.name === 'TypeError' || error.message.includes('fetch')) {\r\n        throw new Error('Network error. Please check your internet connection.');\r\n      }\r\n      \r\n      console.error('💥 Get Meal Details Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async addMealFromSuggestion(mealData) {\r\n    try {\r\n      const token = localStorage.getItem('authToken');\r\n      \r\n      if (!mealData.recipe_id || !mealData.meal_type || !mealData.log_date) {\r\n        throw new Error('Recipe ID, meal type, and log date are required');\r\n      }\r\n      \r\n      const requestData = {\r\n        recipe_id: mealData.recipe_id,\r\n        meal_type: mealData.meal_type,\r\n        servings: mealData.servings || 1,\r\n        log_date: mealData.log_date\r\n      };\r\n      \r\n      const response = await fetch(`${this.baseUrl}/meals/suggestion/add`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify(requestData)\r\n      });\r\n\r\n      const result = await response.json();\r\n      console.log('🔍 Add Meal From Suggestion API Response:', { status: response.status, data: result });\r\n\r\n      if (!response.ok) {\r\n        let errorMessage = result.message || 'Failed to add meal from suggestion';\r\n        \r\n        if (response.status === 404) {\r\n          errorMessage = 'Recipe not found or profile incomplete';\r\n        } else if (response.status === 400) {\r\n          errorMessage = result.message || 'Invalid meal data';\r\n        } else if (response.status === 503) {\r\n          errorMessage = 'Meal service temporarily unavailable';\r\n        }\r\n        \r\n        console.error('🚨 Add Meal From Suggestion Error:', { status: response.status, message: errorMessage });\r\n        throw new Error(errorMessage);\r\n      }\r\n      \r\n      if (result.status === 'success') {\r\n        return result.data;\r\n      } else {\r\n        throw new Error(result.message || 'Failed to add meal from suggestion');\r\n      }\r\n    } catch (error) {\r\n      if (error.name === 'TypeError' || error.message.includes('fetch')) {\r\n        throw new Error('Network error. Please check your internet connection.');\r\n      }\r\n      \r\n      console.error('💥 Add Meal From Suggestion Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async addMealFromPlan(mealData) {\r\n    try {\r\n      const token = localStorage.getItem('authToken');\r\n      \r\n      if (!mealData.recipe_id || !mealData.meal_type || !mealData.log_date) {\r\n        throw new Error('Recipe ID, meal type, and log date are required');\r\n      }\r\n      \r\n      const requestData = {\r\n        recipe_id: mealData.recipe_id,\r\n        meal_type: mealData.meal_type,\r\n        servings: mealData.servings || 1,\r\n        log_date: mealData.log_date\r\n      };\r\n      \r\n      console.log('🚀 Adding meal from plan - Request data:', requestData);\r\n      console.log('🚀 Using endpoint:', `${this.baseUrl}/meals/suggestion/add`);\r\n      \r\n      const response = await fetch(`${this.baseUrl}/meals/suggestion/add`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify(requestData)\r\n      });\r\n\r\n      const result = await response.json();\r\n      console.log('🔍 Add Meal From Plan API Response:', { status: response.status, data: result });\r\n\r\n      if (!response.ok) {\r\n        let errorMessage = result.message || 'Failed to add meal from plan';\r\n        \r\n        if (response.status === 404) {\r\n          errorMessage = 'Recipe not found or profile incomplete';\r\n        } else if (response.status === 400) {\r\n          errorMessage = result.message || 'Invalid meal data';\r\n        } else if (response.status === 503) {\r\n          errorMessage = 'Meal service temporarily unavailable';\r\n        }\r\n        \r\n        console.error('🚨 Add Meal From Plan Error:', { status: response.status, message: errorMessage });\r\n        throw new Error(errorMessage);\r\n      }\r\n      \r\n      if (result.status === 'success') {\r\n        return result.data;\r\n      } else {\r\n        throw new Error(result.message || 'Failed to add meal from plan');\r\n      }\r\n    } catch (error) {\r\n      if (error.name === 'TypeError' || error.message.includes('fetch')) {\r\n        console.error('🌐 Network error details:', error);\r\n        throw new Error('Network error. Please check your internet connection.');\r\n      }\r\n      \r\n      console.error('💥 Add Meal From Plan Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async addFullMealPlan(mealPlanData) {\r\n    try {\r\n      const token = localStorage.getItem('authToken');\r\n      \r\n      if (!mealPlanData.meal_plan || !mealPlanData.log_date) {\r\n        throw new Error('Meal plan and log date are required');\r\n      }\r\n      \r\n      console.log('🚀 Adding full meal plan - Request data:', mealPlanData);\r\n      console.log('🚀 Using endpoint:', `${this.baseUrl}/meal-plans/add-full`);\r\n      \r\n      const response = await fetch(`${this.baseUrl}/meal-plans/add-full`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify(mealPlanData)\r\n      });\r\n\r\n      console.log('🔍 Response status:', response.status);\r\n      console.log('🔍 Response ok:', response.ok);\r\n\r\n      let result;\r\n      try {\r\n        result = await response.json();\r\n        console.log('🔍 Add Full Meal Plan API Response:', { status: response.status, data: result });\r\n      } catch (parseError) {\r\n        console.error('🚨 Failed to parse response as JSON:', parseError);\r\n        throw new Error('Invalid response format from server');\r\n      }\r\n\r\n      if (!response.ok) {\r\n        let errorMessage = result.message || 'Failed to add full meal plan';\r\n        \r\n        if (response.status === 404) {\r\n          errorMessage = 'Endpoint not found';\r\n        } else if (response.status === 400) {\r\n          errorMessage = result.message || 'Invalid meal plan data';\r\n        } else if (response.status === 503) {\r\n          errorMessage = 'Meal service temporarily unavailable';\r\n        }\r\n        \r\n        console.error('🚨 Add Full Meal Plan Error:', { status: response.status, message: errorMessage, response: result });\r\n        throw new Error(errorMessage);\r\n      }\r\n      \r\n      if (result.status === 'success') {\r\n        return result.data;\r\n      } else {\r\n        throw new Error(result.message || 'Failed to add full meal plan');\r\n      }\r\n    } catch (error) {\r\n      if (error.name === 'TypeError' || error.message.includes('fetch')) {\r\n        console.error('🌐 Network error details:', error);\r\n        console.error('🌐 Base URL:', this.baseUrl);\r\n        console.error('🌐 Full URL:', `${this.baseUrl}/meal-plans/add-full`);\r\n        throw new Error('Network error. Please check your internet connection.');\r\n      }\r\n      \r\n      console.error('💥 Add Full Meal Plan Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nconst mealApiService = new MealApiService();\r\n\r\nif (typeof window !== 'undefined') {\r\n  window.mealApiService = mealApiService;\r\n}\r\n\r\nexport default mealApiService;"],"names":["_regeneratorRuntime","r","t","e","Object","prototype","n","hasOwnProperty","o","Symbol","i","iterator","a","asyncIterator","u","toStringTag","c","defineProperty","value","enumerable","configurable","writable","h","Generator","create","Error","done","method","arg","delegate","d","f","sent","_sent","dispatchException","abrupt","s","type","Context","call","wrap","GeneratorFunction","GeneratorFunctionPrototype","l","p","getPrototypeOf","y","x","v","g","forEach","_invoke","AsyncIterator","_typeof","resolve","__await","then","TypeError","next","w","tryEntries","push","m","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","unshift","pop","values","prev","charAt","slice","stop","rval","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_defineProperties","_toPropertyKey","key","toPrimitive","String","Number","_toPrimitive","mealApiService","MealApiService","_classCallCheck","this","baseUrl","_createMealEntry","_callee","mealData","token","response","result","_context","localStorage","getItem","fetch","concat","headers","body","JSON","stringify","ok","status","json","data","message","t0","console","error","_x","_getMealEntries","_callee2","params","queryParams","url","_args2","_context2","undefined","URLSearchParams","log_date","append","meal_type","toString","meal_entries","_getDailyLog","_callee3","logDate","_context3","log","daily_log","total_calories_consumed","total_protein_consumed","total_carbs_consumed","total_fat_consumed","remaining_calories","includes","_x2","_updateMealEntry","_callee4","mealEntryId","updateData","_context4","_x3","_x4","_deleteMealEntry","_callee5","_context5","_x5","_generateMealPlan","_callee6","errorMessage","firstPlan","possibleMealTypes","foundMeals","allKeys","mealLikeKeys","hasMeals","_context6","details","meal_plans","Array","isArray","filter","keyLower","toLowerCase","t1","stack","_convertMealToEntry","_callee7","mealType","detailedMeal","recipeId","entryData","_context7","recipe_id","id","getMealDetails","warn","food_item_id","Date","now","servings","serving_size","createMealEntry","_x6","_x7","_x8","_getMealSuggestions","_callee8","keywords","keywordsParam","_context8","join","encodeURIComponent","_x9","_getMealDetails","_callee9","_context9","_x0","_addMealFromSuggestion","_callee0","requestData","_context0","_x1","_addMealFromPlan","_callee1","_context1","_x10","_addFullMealPlan","_callee10","mealPlanData","_context10","meal_plan","_x11","window"],"sourceRoot":""}